{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-6291e4cb88544e97204542802d22500dd1221f46",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/TeamEconomy.sol": "project/contracts/TeamEconomy.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/TeamEconomy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface ITeamManager {\n    function accountTeam(address account) external view returns (uint256);\n\n    function teams(\n        uint256 teamId\n    ) external view returns (string memory name, uint256 activeMemberCount);\n\n    function members(\n        uint256 teamId,\n        address account\n    )\n        external\n        view\n        returns (\n            uint8 status,\n            uint64 joinedAt,\n            uint64 eliminatedAt,\n            uint64 cooldownEndsAt\n        );\n\n    function getTeamSize(uint256 teamId) external view returns (uint256);\n}\n\ninterface IIdoToken {\n    function mint(address to, uint256 amount) external;\n}\n\ninterface IWedoToken {\n    function mint(address to, uint256 amount) external;\n\n    function burn(address from, uint256 amount) external;\n}\n\ninterface ITeamEconomyHooks {\n    function onJoin(uint256 teamId, address account) external;\n\n    function onLeave(uint256 teamId, address account) external;\n}\n\ncontract TeamEconomy is AccessControl, ReentrancyGuard, ITeamEconomyHooks {\n    bytes32 public constant DISTRIBUTOR_ROLE = keccak256(\"DISTRIBUTOR_ROLE\");\n    bytes32 public constant PARAM_ROLE = keccak256(\"PARAM_ROLE\");\n\n    IIdoToken public immutable ido;\n    IWedoToken public immutable wedo;\n    ITeamManager public teamManager;\n\n    // L 值配置\n    uint256 public LMin = 1000; // 默认最小 L (1e3 precision)\n    uint256 public LMax = 1500; // 默认最大 L (1e3 precision)\n\n    // per team accounting\n    mapping(uint256 => uint256) public teamWedoBalance; // raw WEDO units\n    mapping(uint256 => uint256) public accIdoPerSurvivor; // 1e18 precision\n    mapping(uint256 => uint256) public residual; // dust leftover per team\n\n    // per user accounting (MasterChef-style)\n    mapping(uint256 => mapping(address => uint256)) public userRewardDebt; // shares * acc\n    mapping(uint256 => mapping(address => uint256)) public userAccrued; // accumulated pending separated from acc\n    mapping(uint256 => mapping(address => uint8)) public userShares; // 0 or 1 (survivor flag)\n\n    // Stage scalar S (1e3) with optional delayed activation\n    uint256 public stageScalar = 1000; // current S (1e3)\n    uint256 public pendingStageScalar; // pending S\n    uint256 public stageScalarEffectiveAt; // timestamp when pending takes effect\n    uint256 public immutable stageUpdateDelay; // seconds\n\n    event StageScalarUpdated(uint256 newS, uint256 effectiveAt);\n    event LConfigUpdated(uint256 LMin, uint256 LMax);\n    event TeamCredited(uint256 indexed teamId, uint256 amount);\n    event PersonalCredited(address indexed account, uint256 amount);\n    event TeamWithdraw(\n        uint256 indexed teamId,\n        address indexed caller,\n        uint256 amountWEDO,\n        uint256 L,\n        uint256 mintIdo,\n        uint256 R\n    );\n    event Claimed(\n        uint256 indexed teamId,\n        address indexed account,\n        uint256 amount\n    );\n\n    constructor(\n        address ido_,\n        address wedo_,\n        address teamManager_,\n        uint256 initialS,\n        uint256 stageUpdateDelaySeconds,\n        address admin\n    ) {\n        ido = IIdoToken(ido_);\n        wedo = IWedoToken(wedo_);\n        teamManager = ITeamManager(teamManager_);\n        stageScalar = initialS; // 1e18\n        stageUpdateDelay = stageUpdateDelaySeconds;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _grantRole(DISTRIBUTOR_ROLE, admin);\n        _grantRole(PARAM_ROLE, admin);\n\n        emit StageScalarUpdated(initialS, block.timestamp);\n    }\n\n    function setTeamManager(\n        address teamManager_\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        teamManager = ITeamManager(teamManager_);\n    }\n\n    function setLConfig(\n        uint256 _LMin,\n        uint256 _LMax\n    ) external onlyRole(PARAM_ROLE) {\n        require(_LMin >= 1e3 && _LMax >= _LMin, \"invalid L range\");\n        LMin = _LMin;\n        LMax = _LMax;\n        emit LConfigUpdated(_LMin, _LMax);\n    }\n\n    function getStageScalar() public view returns (uint256) {\n        if (\n            pendingStageScalar != 0 && block.timestamp >= stageScalarEffectiveAt\n        ) {\n            return pendingStageScalar;\n        }\n        return stageScalar;\n    }\n\n    function setStageScalar(uint256 newS) external onlyRole(PARAM_ROLE) {\n        if (stageUpdateDelay == 0) {\n            stageScalar = newS;\n            pendingStageScalar = 0;\n            stageScalarEffectiveAt = 0;\n            emit StageScalarUpdated(newS, block.timestamp);\n        } else {\n            pendingStageScalar = newS;\n            stageScalarEffectiveAt = block.timestamp + stageUpdateDelay;\n            emit StageScalarUpdated(newS, stageScalarEffectiveAt);\n        }\n    }\n\n    // distributor: mint WEDO into vault and track per-team balance\n    function creditTeamWEDO(\n        uint256 teamId,\n        uint256 amount\n    ) external onlyRole(DISTRIBUTOR_ROLE) {\n        require(amount > 0, \"zero amount\");\n        wedo.mint(address(this), amount);\n        teamWedoBalance[teamId] += amount;\n        emit TeamCredited(teamId, amount);\n    }\n\n    // distributor: mint IDO directly to account (personal share)\n    function creditPersonalIDO(\n        address account,\n        uint256 amount\n    ) external onlyRole(DISTRIBUTOR_ROLE) {\n        require(amount > 0, \"zero amount\");\n        ido.mint(account, amount);\n        emit PersonalCredited(account, amount);\n    }\n\n    function _syncStage() internal {\n        if (\n            pendingStageScalar != 0 && block.timestamp >= stageScalarEffectiveAt\n        ) {\n            stageScalar = pendingStageScalar;\n            pendingStageScalar = 0;\n            stageScalarEffectiveAt = 0;\n        }\n    }\n\n    function getR(uint256 teamId) public view returns (uint256 R) {\n        (, R) = teamManager.teams(teamId);\n    }\n\n    function getTeamL(uint256 teamId) public view returns (uint256 L) {\n        (, uint256 R) = teamManager.teams(teamId);\n        uint256 n0 = teamManager.getTeamSize(teamId);\n        if (n0 == 0) return 0;\n        uint256 S = getStageScalar();\n        // L = S * (lMin + (lMax - lMin) * R / n0) / 1e3\n        uint256 delta = LMax - LMin;\n        uint256 linear = LMin + (delta * R) / n0;\n        L = (S * linear) / 1e3;\n    }\n\n    function withdraw(uint256 teamId, uint256 amountWEDO) public nonReentrant {\n        require(amountWEDO > 0, \"zero amount\");\n        require(teamWedoBalance[teamId] >= amountWEDO, \"insufficient\");\n\n        // must be active member\n        uint256 userTeam = teamManager.accountTeam(msg.sender);\n        require(userTeam == teamId, \"not member\");\n        (uint8 status, , , ) = teamManager.members(teamId, msg.sender);\n        require(status == 1, \"inactive\");\n\n        _syncStage();\n\n        uint256 R = getR(teamId);\n        require(R > 0, \"R=0\");\n        uint256 L = getTeamL(teamId); // already includes S and fixed point 1e3\n\n        // burn WEDO and update balance\n        teamWedoBalance[teamId] -= amountWEDO;\n        wedo.burn(address(this), amountWEDO);\n\n        // mintable IDO = amountWEDO * L / 1e3\n        uint256 mintIdo = (amountWEDO * L) / 1e3;\n        uint256 perCapita = mintIdo / R; // floor\n        residual[teamId] += mintIdo - (perCapita * R);\n\n        accIdoPerSurvivor[teamId] += perCapita; // 1e18 precision inherited from L and decimals alignment\n\n        emit TeamWithdraw(teamId, msg.sender, amountWEDO, L, mintIdo, R);\n    }\n\n    function withdrawAll(uint256 teamId) external {\n        uint256 amount = teamWedoBalance[teamId];\n        withdraw(teamId, amount);\n    }\n\n    function pendingIdo(\n        uint256 teamId,\n        address account\n    ) public view returns (uint256) {\n        uint256 shares = userShares[teamId][account];\n        uint256 acc = accIdoPerSurvivor[teamId];\n        uint256 debt = userRewardDebt[teamId][account];\n        uint256 accrued = userAccrued[teamId][account];\n        uint256 current = (shares * acc);\n        if (current < debt) return accrued; // should not happen but guard\n        return accrued + (current - debt);\n    }\n\n    function claim(uint256 teamId) public nonReentrant {\n        uint256 amount = pendingIdo(teamId, msg.sender);\n        if (amount == 0) {\n            // still reset debt to latest baseline\n            userRewardDebt[teamId][msg.sender] =\n                userShares[teamId][msg.sender] *\n                accIdoPerSurvivor[teamId];\n            return;\n        }\n        userAccrued[teamId][msg.sender] = 0;\n        userRewardDebt[teamId][msg.sender] =\n            userShares[teamId][msg.sender] *\n            accIdoPerSurvivor[teamId];\n        ido.mint(msg.sender, amount);\n        emit Claimed(teamId, msg.sender, amount);\n    }\n\n    function claimMany(uint256[] calldata teamIds) external {\n        for (uint256 i = 0; i < teamIds.length; i++) {\n            claim(teamIds[i]);\n        }\n    }\n\n    // -------- Hooks from TeamManager to keep survivor shares in sync --------\n    function onJoin(uint256 teamId, address account) external override {\n        require(msg.sender == address(teamManager), \"only TM\");\n        // settle before changing shares\n        uint256 pending = pendingIdo(teamId, account);\n        userAccrued[teamId][account] = pending;\n        userShares[teamId][account] = 1;\n        userRewardDebt[teamId][account] = accIdoPerSurvivor[teamId];\n    }\n\n    function onLeave(uint256 teamId, address account) external override {\n        require(msg.sender == address(teamManager), \"only TM\");\n        // settle pending into accrued, then drop shares\n        uint256 pending = pendingIdo(teamId, account);\n        userAccrued[teamId][account] = pending;\n        userShares[teamId][account] = 0;\n        userRewardDebt[teamId][account] = 0;\n    }\n}\n"
      }
    }
  }
}